package com.equipmentmanage.app.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.equipmentmanage.app.bean.TaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_BEAN".
*/
public class TaskBeanDao extends AbstractDao<TaskBean, String> {

    public static final String TABLENAME = "TASK_BEAN";

    /**
     * Properties of entity TaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DetectionSdate = new Property(0, String.class, "detectionSdate", false, "DETECTION_SDATE");
        public final static Property AreaId_dictText = new Property(1, String.class, "areaId_dictText", false, "AREA_ID_DICT_TEXT");
        public final static Property TaskEnd = new Property(2, String.class, "taskEnd", false, "TASK_END");
        public final static Property DetectionPeriod_dictText = new Property(3, String.class, "detectionPeriod_dictText", false, "DETECTION_PERIOD_DICT_TEXT");
        public final static Property DetectionYear = new Property(4, String.class, "detectionYear", false, "DETECTION_YEAR");
        public final static Property BelongCompany = new Property(5, String.class, "belongCompany", false, "BELONG_COMPANY");
        public final static Property DetectionYear_dictText = new Property(6, String.class, "detectionYear_dictText", false, "DETECTION_YEAR_DICT_TEXT");
        public final static Property CreateScale = new Property(7, String.class, "createScale", false, "CREATE_SCALE");
        public final static Property DeviceId = new Property(8, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property CreateScale_dictText = new Property(9, String.class, "createScale_dictText", false, "CREATE_SCALE_DICT_TEXT");
        public final static Property UpdateBy = new Property(10, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property DetectionEdate = new Property(11, String.class, "detectionEdate", false, "DETECTION_EDATE");
        public final static Property Id = new Property(12, String.class, "id", true, "ID");
        public final static Property TaskNum = new Property(13, String.class, "taskNum", false, "TASK_NUM");
        public final static Property DeviceId_dictText = new Property(14, String.class, "deviceId_dictText", false, "DEVICE_ID_DICT_TEXT");
        public final static Property PlanType = new Property(15, String.class, "planType", false, "PLAN_TYPE");
        public final static Property InspectionType_dictText = new Property(16, String.class, "inspectionType_dictText", false, "INSPECTION_TYPE_DICT_TEXT");
        public final static Property InspectionType = new Property(17, String.class, "inspectionType", false, "INSPECTION_TYPE");
        public final static Property UpdateTime = new Property(18, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property DetectionPeriod = new Property(19, String.class, "detectionPeriod", false, "DETECTION_PERIOD");
        public final static Property CreateBy = new Property(20, String.class, "createBy", false, "CREATE_BY");
        public final static Property AreaId = new Property(21, String.class, "areaId", false, "AREA_ID");
        public final static Property CreateTime = new Property(22, String.class, "createTime", false, "CREATE_TIME");
        public final static Property PlanType_dictText = new Property(23, String.class, "planType_dictText", false, "PLAN_TYPE_DICT_TEXT");
        public final static Property TaskEnd_dictText = new Property(24, String.class, "taskEnd_dictText", false, "TASK_END_DICT_TEXT");
        public final static Property SysOrgCode = new Property(25, String.class, "sysOrgCode", false, "SYS_ORG_CODE");
        public final static Property TaskName = new Property(26, String.class, "taskName", false, "TASK_NAME");
    }


    public TaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_BEAN\" (" + //
                "\"DETECTION_SDATE\" TEXT," + // 0: detectionSdate
                "\"AREA_ID_DICT_TEXT\" TEXT," + // 1: areaId_dictText
                "\"TASK_END\" TEXT," + // 2: taskEnd
                "\"DETECTION_PERIOD_DICT_TEXT\" TEXT," + // 3: detectionPeriod_dictText
                "\"DETECTION_YEAR\" TEXT," + // 4: detectionYear
                "\"BELONG_COMPANY\" TEXT," + // 5: belongCompany
                "\"DETECTION_YEAR_DICT_TEXT\" TEXT," + // 6: detectionYear_dictText
                "\"CREATE_SCALE\" TEXT," + // 7: createScale
                "\"DEVICE_ID\" TEXT," + // 8: deviceId
                "\"CREATE_SCALE_DICT_TEXT\" TEXT," + // 9: createScale_dictText
                "\"UPDATE_BY\" TEXT," + // 10: updateBy
                "\"DETECTION_EDATE\" TEXT," + // 11: detectionEdate
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 12: id
                "\"TASK_NUM\" TEXT," + // 13: taskNum
                "\"DEVICE_ID_DICT_TEXT\" TEXT," + // 14: deviceId_dictText
                "\"PLAN_TYPE\" TEXT," + // 15: planType
                "\"INSPECTION_TYPE_DICT_TEXT\" TEXT," + // 16: inspectionType_dictText
                "\"INSPECTION_TYPE\" TEXT," + // 17: inspectionType
                "\"UPDATE_TIME\" TEXT," + // 18: updateTime
                "\"DETECTION_PERIOD\" TEXT," + // 19: detectionPeriod
                "\"CREATE_BY\" TEXT," + // 20: createBy
                "\"AREA_ID\" TEXT," + // 21: areaId
                "\"CREATE_TIME\" TEXT," + // 22: createTime
                "\"PLAN_TYPE_DICT_TEXT\" TEXT," + // 23: planType_dictText
                "\"TASK_END_DICT_TEXT\" TEXT," + // 24: taskEnd_dictText
                "\"SYS_ORG_CODE\" TEXT," + // 25: sysOrgCode
                "\"TASK_NAME\" TEXT);"); // 26: taskName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskBean entity) {
        stmt.clearBindings();
 
        String detectionSdate = entity.getDetectionSdate();
        if (detectionSdate != null) {
            stmt.bindString(1, detectionSdate);
        }
 
        String areaId_dictText = entity.getAreaId_dictText();
        if (areaId_dictText != null) {
            stmt.bindString(2, areaId_dictText);
        }
 
        String taskEnd = entity.getTaskEnd();
        if (taskEnd != null) {
            stmt.bindString(3, taskEnd);
        }
 
        String detectionPeriod_dictText = entity.getDetectionPeriod_dictText();
        if (detectionPeriod_dictText != null) {
            stmt.bindString(4, detectionPeriod_dictText);
        }
 
        String detectionYear = entity.getDetectionYear();
        if (detectionYear != null) {
            stmt.bindString(5, detectionYear);
        }
 
        String belongCompany = entity.getBelongCompany();
        if (belongCompany != null) {
            stmt.bindString(6, belongCompany);
        }
 
        String detectionYear_dictText = entity.getDetectionYear_dictText();
        if (detectionYear_dictText != null) {
            stmt.bindString(7, detectionYear_dictText);
        }
 
        String createScale = entity.getCreateScale();
        if (createScale != null) {
            stmt.bindString(8, createScale);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(9, deviceId);
        }
 
        String createScale_dictText = entity.getCreateScale_dictText();
        if (createScale_dictText != null) {
            stmt.bindString(10, createScale_dictText);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(11, updateBy);
        }
 
        String detectionEdate = entity.getDetectionEdate();
        if (detectionEdate != null) {
            stmt.bindString(12, detectionEdate);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(13, id);
        }
 
        String taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindString(14, taskNum);
        }
 
        String deviceId_dictText = entity.getDeviceId_dictText();
        if (deviceId_dictText != null) {
            stmt.bindString(15, deviceId_dictText);
        }
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(16, planType);
        }
 
        String inspectionType_dictText = entity.getInspectionType_dictText();
        if (inspectionType_dictText != null) {
            stmt.bindString(17, inspectionType_dictText);
        }
 
        String inspectionType = entity.getInspectionType();
        if (inspectionType != null) {
            stmt.bindString(18, inspectionType);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(19, updateTime);
        }
 
        String detectionPeriod = entity.getDetectionPeriod();
        if (detectionPeriod != null) {
            stmt.bindString(20, detectionPeriod);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(21, createBy);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(22, areaId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(23, createTime);
        }
 
        String planType_dictText = entity.getPlanType_dictText();
        if (planType_dictText != null) {
            stmt.bindString(24, planType_dictText);
        }
 
        String taskEnd_dictText = entity.getTaskEnd_dictText();
        if (taskEnd_dictText != null) {
            stmt.bindString(25, taskEnd_dictText);
        }
 
        String sysOrgCode = entity.getSysOrgCode();
        if (sysOrgCode != null) {
            stmt.bindString(26, sysOrgCode);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(27, taskName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskBean entity) {
        stmt.clearBindings();
 
        String detectionSdate = entity.getDetectionSdate();
        if (detectionSdate != null) {
            stmt.bindString(1, detectionSdate);
        }
 
        String areaId_dictText = entity.getAreaId_dictText();
        if (areaId_dictText != null) {
            stmt.bindString(2, areaId_dictText);
        }
 
        String taskEnd = entity.getTaskEnd();
        if (taskEnd != null) {
            stmt.bindString(3, taskEnd);
        }
 
        String detectionPeriod_dictText = entity.getDetectionPeriod_dictText();
        if (detectionPeriod_dictText != null) {
            stmt.bindString(4, detectionPeriod_dictText);
        }
 
        String detectionYear = entity.getDetectionYear();
        if (detectionYear != null) {
            stmt.bindString(5, detectionYear);
        }
 
        String belongCompany = entity.getBelongCompany();
        if (belongCompany != null) {
            stmt.bindString(6, belongCompany);
        }
 
        String detectionYear_dictText = entity.getDetectionYear_dictText();
        if (detectionYear_dictText != null) {
            stmt.bindString(7, detectionYear_dictText);
        }
 
        String createScale = entity.getCreateScale();
        if (createScale != null) {
            stmt.bindString(8, createScale);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(9, deviceId);
        }
 
        String createScale_dictText = entity.getCreateScale_dictText();
        if (createScale_dictText != null) {
            stmt.bindString(10, createScale_dictText);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(11, updateBy);
        }
 
        String detectionEdate = entity.getDetectionEdate();
        if (detectionEdate != null) {
            stmt.bindString(12, detectionEdate);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(13, id);
        }
 
        String taskNum = entity.getTaskNum();
        if (taskNum != null) {
            stmt.bindString(14, taskNum);
        }
 
        String deviceId_dictText = entity.getDeviceId_dictText();
        if (deviceId_dictText != null) {
            stmt.bindString(15, deviceId_dictText);
        }
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(16, planType);
        }
 
        String inspectionType_dictText = entity.getInspectionType_dictText();
        if (inspectionType_dictText != null) {
            stmt.bindString(17, inspectionType_dictText);
        }
 
        String inspectionType = entity.getInspectionType();
        if (inspectionType != null) {
            stmt.bindString(18, inspectionType);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(19, updateTime);
        }
 
        String detectionPeriod = entity.getDetectionPeriod();
        if (detectionPeriod != null) {
            stmt.bindString(20, detectionPeriod);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(21, createBy);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(22, areaId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(23, createTime);
        }
 
        String planType_dictText = entity.getPlanType_dictText();
        if (planType_dictText != null) {
            stmt.bindString(24, planType_dictText);
        }
 
        String taskEnd_dictText = entity.getTaskEnd_dictText();
        if (taskEnd_dictText != null) {
            stmt.bindString(25, taskEnd_dictText);
        }
 
        String sysOrgCode = entity.getSysOrgCode();
        if (sysOrgCode != null) {
            stmt.bindString(26, sysOrgCode);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(27, taskName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12);
    }    

    @Override
    public TaskBean readEntity(Cursor cursor, int offset) {
        TaskBean entity = new TaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // detectionSdate
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaId_dictText
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskEnd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // detectionPeriod_dictText
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // detectionYear
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // belongCompany
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // detectionYear_dictText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createScale
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createScale_dictText
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updateBy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // detectionEdate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // taskNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // deviceId_dictText
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // planType
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // inspectionType_dictText
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // inspectionType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // updateTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // detectionPeriod
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // createBy
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // areaId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // createTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // planType_dictText
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // taskEnd_dictText
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // sysOrgCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // taskName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskBean entity, int offset) {
        entity.setDetectionSdate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAreaId_dictText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskEnd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetectionPeriod_dictText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetectionYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBelongCompany(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetectionYear_dictText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateScale(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateScale_dictText(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDetectionEdate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTaskNum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeviceId_dictText(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPlanType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInspectionType_dictText(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInspectionType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpdateTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDetectionPeriod(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreateBy(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAreaId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCreateTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPlanType_dictText(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTaskEnd_dictText(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSysOrgCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTaskName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TaskBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(TaskBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
